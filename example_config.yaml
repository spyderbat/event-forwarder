# Your spyderbat org UID goes here
spyderbat_org_uid: your_org_uid

# Your spyderbat API key goes here
spyderbat_secret_api_key: your_api_key

# Optionally override the API endpoint (non-US regions only)
api_host:

# Specify the location to write logs and keep state
log_path: /opt/spyderbat-events/var/log

# Optionally enable forwarding to the host's syslog daemon for forwarding or collection by other agents
# NOTE: This is not recommended if syslog messages are forwarded over unencrypted channels to other hosts.
# NOTE: This is not required for Splunk integration.
# local_syslog_forwarding: true

# Optionally filter events using an expression syntax.
# The expression must evaluate to a bool; If it is true, the event
# will be logged.
#
# The expression syntax is documented here:
#          https://expr-lang.org/docs/language-definition
#
# If the expression fails to compile, the event forwarder will exit
# with an error at startup.
#
# If the expression fails to evaluate, the event will be logged and the
# forwarder will continue. The most common reason for an expression to
# fail to evaluate is that the event does not contain the field(s)
# referenced in the expression. To avoid this problem, check that the
# fields you are referencing are not nil, or use the short-circuit "??"
# operator. Schema is guaranteed to be present.
#
# Here is an example:
#
# expr: |
#         (
#             schema startsWith "model_spydertrace:"
#             and
#             (score ?? 0) > 1000
#         )
#         or
#         (
#             not
#             (
#                 schema startsWith "model_spydertrace:"
#                 or
#                 schema startsWith "event_redflag:bogons:"
#                 or
#                 (severity ?? "") in ["info", "low", "medium"]
#             )
#         )
#
# This expression will log all events with a schema starting with
# "model_spydertrace:" and a score greater than 1000. It will log
# everything else except events with a schema starting with
# "event_redflag:bogons:" or a severity of "low" or "medium".

# Optionally send data to a webhook (e.g., Panther)
#
# For Panther, it is recommended to use bearer auth, zstd compression,
# and a max payload of 500000 bytes.
#
# Panther does not currently support HMAC mode with compression enabled.
# webhook:
#   endpoint_url: https://example.com/webhook # required for webhook
#   compression_algo: zstd # optional [ zstd | gzip | default=none ]
#   max_payload_bytes: 500000 # optional; default is 1048576 (1 MiB); max is 10485760 (10 MiB)
#   authentication:
#     method: bearer # [ bearer | basic | hmac | shared_secret | default=none ]
#     parameters:
#       header_name: X-HMAC # value required for hmac and shared_secret
#       secret_key: base64-encoded-bearer-token # value required for bearer, hmac, and shared_secret
#       hash_algo: sha256 # required for "hmac" authentication method; must be "sha256"
#       username: username # value required for basic
#       password: base64-encoded-password # value required for basic

# Optionally enable stdout logging -- useful in k8s and containers
#
# stdout: true
